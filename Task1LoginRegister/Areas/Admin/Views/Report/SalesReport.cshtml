@model Task1LoginRegister.DTOs.SalesReportViewModel
@{
    ViewData["Title"] = "Comprehensive Sales Report";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    ViewData["ShowActions"] = false;

}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-gray-800">
            <i class="fas fa-chart-line"></i> Sales Performance Dashboard
        </h1>
        <div class="btn-group">
            <a asp-action="Index" asp-controller="Report" class="btn btn-sm btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back to Reports
            </a>
            <a asp-action="ExportSalesReport" asp-controller="Report"
               asp-route-startDate="@Model.StartDate.ToString("yyyy-MM-dd")"
               asp-route-endDate="@Model.EndDate.ToString("yyyy-MM-dd")"
               class="btn btn-sm btn-success">
                <i class="fas fa-file-export"></i> Export Detailed Report
            </a>
        </div>
    </div>

    <!-- Date Filters Partial -->
    <partial name="_DateApplyFilters" />

    <!-- Key Performance Indicators -->
    <div class="row">
        <!-- Financial Metrics -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                        Total Sales
                    </div>
                    <div class="h5 mb-0 font-weight-bold text-gray-800">
                        <i class="fas fa-inr"></i> @Model.TotalSales.ToString("N2")
                    </div>
                </div>
            </div>
        </div>

        <!-- Profit Metrics -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Gross Profit
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                <i class="fas fa-inr"></i> @Model.GrossProfit.ToString("N2")
                                <small class="text-success">(@Model.ProfitMargin.ToString("N2")%)</small>
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-inr fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Metrics -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Total Orders
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                @Model.TotalOrders
                                <small class="text-info">(Avg: <i class="fas fa-inr"></i> @Model.AverageOrderValue.ToString("N2"))</small>
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-shopping-cart fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Customer Metrics -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Customer Retention
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                @Model.CustomerRetentionRate.ToString("N2")%
                                <small class="text-warning">(@Model.ReturningCustomers / @Model.TotalCustomers)</small>
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Sales Trend Chart -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Daily Sales Trend</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="salesTrendChart" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Performance Metrics -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Performance Overview</h6>
                </div>
                <div class="card-body">
                    <div class="small text-gray-500">Refund Rate</div>
                    <div class="h5 mb-0 font-weight-bold text-gray-800">
                        @Model.RefundRate.ToString("N2")%
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Payment Method Distribution -->
        <div class="col-xl-6 col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Payment Method Distribution</h6>
                </div>
                <div class="card-body">
                    <canvas id="paymentMethodChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Order Status Distribution -->
        <div class="col-xl-6 col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Order Status Breakdown</h6>
                </div>
                <div class="card-body">
                    <canvas id="orderStatusChart"></canvas>
                </div>
            </div>
        </div>
    </div>


    <partial name="_OrderTablesData" model="@Model.Orders" view-data="ViewData" />
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <script>
        $(document).ready(function () {
            $("#orderTable").DataTable({
                "order": [[0, "desc"]],
                responsive: true,
                pageLength: 25
            });

            // Chart configuration
            const chartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            usePointStyle: true,
                        }
                    },
                    datalabels: {
                        color: 'white',
                        font: { weight: 'bold' },
                        formatter: (value, ctx) => {
                            const total = ctx.dataset.data.reduce((a, b) => a + b, 0);
                            return value > total * 0.05 ?
                                `${value}\n(${((value/total)*100).toFixed(1)}%)` : '';
                        }
                    }
                }
            };

            // Sales Trend Chart
            const salesData = @Html.Raw(Json.Serialize(Model.DailySales));
            new Chart(document.getElementById('salesTrendChart'), {
                type: 'line',
                data: {
                    labels: Object.keys(salesData),
                    datasets: [{
                        label: 'Daily Sales (₹)',
                        data: Object.values(salesData),
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1,
                        fill: true
                    }]
                },
                options: {
                    ...chartOptions,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: (value) => `₹${value}`
                            }
                        }
                    },
                     plugins: {
                        datalabels: {
                            color: '#000',   align: 'top',
                            formatter: function(value, context) {
                                return `₹${value.toLocaleString()}`;
                            },
                             font: {
                                 weight: 'bold'
                             }
                        }
                    }
                },
                 plugins: [ChartDataLabels]
            });

            // Payment Method Chart
            new Chart(document.getElementById('paymentMethodChart'), {
                type: 'pie',
                data: {
                    labels: Object.keys(@Html.Raw(Json.Serialize(Model.PaymentMethodStats))),
                    datasets: [{
                        data: Object.values(@Html.Raw(Json.Serialize(Model.PaymentMethodStats))),
                        backgroundColor: [
                           '#FFA500','#0dcaf0','#FFA500','#0d6efd'
                        ]
                    }]
                },
                options: chartOptions,
                plugins: [ChartDataLabels]
            });

            // Order Status Chart
            new Chart(document.getElementById('orderStatusChart'), {
                type: 'doughnut',
                data: {
                    labels: Object.keys(@Html.Raw(Json.Serialize(Model.OrderStatusDistribution))),
                    datasets: [{
                        data: Object.values(@Html.Raw(Json.Serialize(Model.OrderStatusDistribution))),
                        backgroundColor: [
                           '#198754', '#e74a3b', '#FFA500','#0d6efd' ,'#0dcaf0'
                        ]
                    }]
                },
                plugins: [ChartDataLabels],
                options: chartOptions
            });
        });
    </script>
}