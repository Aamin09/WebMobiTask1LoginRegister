@model Task1LoginRegister.DTOs.ProductVariantCreateDto
@{
    ViewData["Title"] = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<div class="container">
    @if (TempData["success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>Success!</strong> @TempData["success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["error"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>Warning!</strong> @TempData["error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["info"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            <strong>Info:</strong> @TempData["info"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h3 class="m-0 font-weight-bold text-primary">Create Variant for Product: @Model.ProductName</h3>
            <a asp-action="Index" asp-controller="ProductVariant" asp-area="Admin" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Variants
            </a>
        </div>
        <div class="card-body">
    <form asp-action="Create" method="post" id="varinatForm" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="ProductId" />
        <input type="hidden" asp-for="ProductName" />

        <div id="variant-container">
            @for (var i = 0; i < Model.Variants.Count; i++)
            {
                ViewBag.VariantIndex = i;
                ViewBag.ProductId = Model.ProductId;
                ViewBag.ProductAttributes = Model.AvailableAttributes;
                <partial name="_VariantForm" model="Model.Variants[i]" />
            }
        </div>

        <div class="form-group mt-3">
            <button type="button" id="addMoreBtn" class="btn btn-secondary">Add More Variant</button>
        </div>

        <div class="form-group mt-3">
            <input type="submit" id="submitButton" value="Save" class="btn btn-outline-info" />
        </div>
    </form>
    </div>
    </div>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    
    <script>
        $(document).ready(function(){
            // Initialize pricing calculations for all existing variants
            $('.variant-container').each(function() {
                const index = $(this).data('variant-index');
                updateVariantPricing(index);
            });
            // add more variant button
            $('#addMoreBtn').click(function(){
            var varinatCount=$(".variant-container").length;
            $.ajax({
               url: '@Url.Action("AddVariantForm", "ProductVariant", new { area = "Admin" })',
                type:'GET',
                data:{
                    index:varinatCount,
                    productId:@Model.ProductId
                },
                success:function(data){
                    $("#variant-container").append(data);
                     updateVariantPricing(variantCount);
                }
            });
        });

        $(document).on('click', '.remove-variant', function() {
            var index = $(this).data('variant-index');
            $('[data-variant-index="' + index + '"]').remove();
        });
               // Pricing calculation for any variant input change
            $(document).on('input', '.pricing-input', function() {
                const index = $(this).closest('.variant-container').data('variant-index');
                updateVariantPricing(index);
            });

            // Function to update pricing for a specific variant
            function updateVariantPricing(index) {
                const container = $(`.variant-container[data-variant-index="${index}"]`);

                const costPrice = parseFloat(container.find('.costPrice').val()) || 0;
                const profitPercentage = parseFloat(container.find('.profitPercentage').val()) || 0;
                const discountPercentage = parseFloat(container.find('.sellingPricePercentage').val()) || 0;

                // Calculate base price (cost + profit margin)
                const basePrice = costPrice * (1 + (profitPercentage / 100));
                container.find('.calculatedBasePrice').val(basePrice.toFixed(2));

                // Calculate final selling price (base price - discount)
                const finalSellingPrice = basePrice * (1 - (discountPercentage / 100));
                container.find('.finalSellingPrice').val(finalSellingPrice.toFixed(2));

                // Calculate final profit
                const finalProfit = finalSellingPrice - costPrice;
                container.find('.finalProfit').val(finalProfit.toFixed(2));

                // Show validation message if selling price is less than cost price
                const pricingAlert = container.find('.pricingValidationAlert');
                if (finalSellingPrice < costPrice) {
                    pricingAlert.show();
                    $('#submitButton').prop('disabled', true);
                } else {
                    pricingAlert.hide();
                    // Only enable submit button if no variants have invalid pricing
                    const anyInvalidPricing = $('.pricingValidationAlert:visible').length > 0;
                    $('#submitButton').prop('disabled', anyInvalidPricing);
                }
            }
        });
    </script>
}