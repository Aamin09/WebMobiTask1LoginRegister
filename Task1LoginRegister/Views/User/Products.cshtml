@model Task1LoginRegister.DTOs.ProductListViewModel

@{
    ViewData["Title"] = "Products";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}

<div class="container mt-5 main">
    <div class="row">
        <!-- Sidebar Filters -->
        <div class="col-md-3">
            <div class="filters-sidebar p-4 shadow-sm rounded bg-light position-sticky" style="top: 20px;">
                <h4>Filters</h4>
                <hr />
                <form method="get" id="filterForm">
                    <!-- Category Filter -->
                    <div class="filter-section mb-4">
                        <h6 class="filter-title">Categories</h6>
                        <select name="categoryId" id="catDropdown" class="form-select" onchange="this.form.submit()">
                            <option value="">All Categories</option>
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.Value" selected="@(category.Value == Model.CategoryId?.ToString() ? "selected" : null)">
                                    @category.Text
                                </option>
                            }
                        </select>
                    </div>

                    <!-- Subcategory Filter -->
                    <div class="filter-section mb-4">
                        <h6 class="filter-title">Subcategories</h6>
                        <select name="subcategoryId" id="subcatDropdown" class="form-select" onchange="this.form.submit()">
                            <option value="">All Subcategories</option>
                            @if (Model.CategoryId.HasValue)
                            {
                                foreach (var subcategory in Model.Subategories)
                                {
                                    <option value="@subcategory.Value" selected="@(subcategory.Value == Model.SubcategoryId?.ToString() ? "selected" : null)">
                                        @subcategory.Text
                                    </option>
                                }
                            }
                        </select>
                    </div>

                    <!-- Price Range Filter -->
                    <div class="filter-section mb-4">
                        <h6 class="filter-title">Price Range</h6>
                        <div class="d-flex gap-3">
                            <input type="number" name="minPrice" class="form-control" placeholder="Min" value="@Model.MinPrice">
                            <input type="number" name="maxPrice" class="form-control" placeholder="Max" value="@Model.MaxPrice">
                        </div>
                    </div>

                    <!-- Apply Filters Button -->
                    <button type="submit" class="btn btn-primary w-100 mt-2">Apply Filters</button>
                </form>
            </div>
        </div>

        <!-- Products Listing -->
        <div class="col-md-9">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="text-dark">Products</h2>
                <div class="d-flex gap-3 align-items-center">
                    <!-- Sorting Options -->
                    <form method="get" id="sortForm">
                        <div class="d-flex gap-3 align-items-center">
                            <label class="form-label align-middle text-end"><strong>Sort By:</strong></label>
                            <select name="sortOrder" class="form-select w-auto" onchange="this.form.submit()">
                                @foreach (var option in ViewBag.SortOptions as List<SelectListItem>)
                                {
                                    <option value="@option.Value" selected="@(ViewBag.CurrentSort == option.Value ? "selected" : null)">
                                        @option.Text
                                    </option>
                                }
                            </select>
                        </div>
                        <!-- Hidden fields to maintain filter state -->
                        <input type="hidden" name="categoryId" value="@Model.CategoryId" />
                        <input type="hidden" name="subcategoryId" value="@Model.SubcategoryId" />
                        <input type="hidden" name="minPrice" value="@Model.MinPrice" />
                        <input type="hidden" name="maxPrice" value="@Model.MaxPrice" />
                    </form>
                </div>
            </div>

            <!-- Product Grid -->
            <div class="row" >
                @foreach (var product in Model.Products)
                {
                    <partial name="_ProductPartialView" model="product" />
                }
            </div>

            <!-- Pagination -->
            <nav aria-label="Page navigation" class="mt-5">
                <ul class="pagination justify-content-center">
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="?page=@i&categoryId=@Model.CategoryId&subcategoryId=@Model.SubcategoryId&minPrice=@Model.MinPrice&maxPrice=@Model.MaxPrice&sortOrder=@ViewBag.CurrentSort">@i</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function loadSubcategoriesData() {
            var categoryId = $("#catDropdown").val();
            var subcatDropdown = $("#subcatDropdown");

            // clearing the subcategory data before fetching new data
            subcatDropdown.empty();
            subcatDropdown.append('<option value="" selected>All Subcategories</option>');

            if (categoryId) {
                $.ajax({
                    url: "/User/GetSubcategories?categoryId=" + categoryId,
                    type: "GET",
                    success: function (data) {
                        $.each(data, function (index, subcategory) {
                            subcatDropdown.append('<option value="' + subcategory.value + '">' + subcategory.text + '</option>');
                        });

                        // Set the selected subcategory if it exists
                        var selectedSubcategoryId = "@Model.SubcategoryId";
                        if (selectedSubcategoryId) {
                            subcatDropdown.val(selectedSubcategoryId);
                        }
                    },
                    error: function () {
                        alert("Failed to load subcategories.");
                    }
                });
            }
        }

        $(document).ready(function () {
            var categoryId = $("#catDropdown").val();
            if (categoryId) {
                loadSubcategoriesData();
            }

            $("#catDropdown").change(function () {
                loadSubcategoriesData();
            });
        });
    </script>
}

<style>
   
    .product-image {
        height: 250px; 
        width:100%;
        object-fit: cover; 
        transition: transform 0.3s ease;
    }
  
    .col-lg-3{
        padding-left:10px;
    }
    .form-select{
        font-size:0.95rem;
    }
    .product-image:hover {
        transform: scale(1.1);
    }
 
    .product-card {
        display: flex;
        flex-direction: column;
        overflow: hidden;
        height: 100%;
        transition: border 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    }

        .product-card:hover {
            border: 2px solid #007bff;
            box-shadow: 0px 4px 12px rgba(0, 123, 255, 0.5); 
        }


    /* Sticky sidebar */
    .filters-sidebar {
        position: -webkit-sticky;
        position: sticky;
        top: 20px;
        z-index: 10;
    }

    .view-options button {
        padding: 0.5rem 1rem;
        font-size: 1.2rem;
    }

    .view-option.active {
        background-color: #007bff;
        color: white;
    }

    .card-body {
        padding: 1.2rem;
        flex-grow: 1;
    }

    .pagination .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }

    .main {
        max-width: 100%; 
        padding-left: 60px;
        padding-right: 60px;
    }

    /* Media Queries for Small Devices */
    @@media (max-width: 480px) { 
        .main {
            padding-left: 10px; 
            padding-right: 10px;
        }

        .product-image {
            height: 425px;
            object-fit: cover;
        }

        .row-cols-md-2 {
            row-gap: 1.5rem;
        }

        .card {
            height: auto; 
        }

        .card-title {
            font-size: 1.1rem;
        }

        .text-muted {
            font-size: 0.9rem;
        }

        .text-success {
            font-size: 1rem;
        }

        .pagination .page-link {
            font-size: 0.8rem;
        }
    }

    /* Media Queries for Tablets */
    @@media (max-width: 768px) { 
        .main {
            padding-left: 10px; 
            padding-right: 10px; 
        }

        .product-image {
            height: 350px; 
            object-fit: cover;
        }

        .card {
            height: auto; 
        }

        .pagination {
            font-size: 0.9rem;
        }
    }

    /* Media Queries for iPad Mini/Pro */
    @@media (max-width: 1024px) { 
        .main {
            padding-left: 10px; 
            padding-right: 10px; 
        }

        .product-image {
            height: 320px; 
            object-fit: cover;
        }

        .card {
            height: auto; 
        }

        .pagination .page-link {
            font-size: 0.9rem;
        }
    }
</style>
